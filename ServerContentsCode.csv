"contentsName","contentsText"
"server.textinput",""
"server.radiobutton"," output$txt2 <- renderText({
paste(""You chose"", input$rb)
})"
"server.numericinput","output$value <- renderText({
input$obs1 
})"
"server.sliderinput","output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})"
"server.selectinput"," output$result <- renderText({
paste(""You chose"", input$state)
})"
"server.dateinput",""
"server.daterangeinput",""
"server.fileinput","output$contents <- renderTable({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})"
"server.actionbutton","comment_save <- eventReactive(input$save,{
cat(""saveButton was pushed""
)})
output$comment_button <- renderText({
comment_save()
})"
"server.checkboxgroupinput","output$txt <- renderText({
icons <- paste(input$icons,collapse = "", "");paste(""You chose"", icons)
})"
"server.ggplot","output$ggplot <- renderPlot({
ggplot(iris,aes(Sepal.Width,Sepal.Length))+geom_point()
})"
"server.plotly","output$plotly <- renderPlotly({
plot_ly(z=volcano,type=""heatmap"")
})"
"server.image","output$imageoutput <- renderImage({
      filename <- normalizePath(""../dog300.png"")  
      list(src=filename,width = 300)
    }, deleteFile = FALSE)"
"server.leaflet","output$mapLeaflet <- renderLeaflet({
leaflet() %>% 
addProviderTiles(providers$Stamen.TonerLite,options = providerTileOptions(noWrap = TRUE))} %>% 
addMiniMap(tiles = providers$Esri.WorldStreetMap,toggleDisplay = TRUE))"
"server.clickimage","output$clickImage <- renderImage({
        list(src = ""../ebimiso2.jpg"",width = 400)
    }, deleteFile = FALSE)
    output$infoClickXY <- renderText({
      paste0(""x="",input$image_click$x,""y="",input$image_click$y)
    })"
"server.clickplot","output$plot1 <- renderPlot({
ggplot(iris,aes(Sepal.Width,Sepal.Length))+geom_point()
})
output$info2 <- renderText({
paste0(""x="", input$plot_click$x, ""
y="", input$plot_click$y)
})"
"server.diagram","output$diagram <- renderGrViz({
nodes <- create_node_df(3)
edges <- create_edge_df(from = 1:3,to = c(2,3,1))
create_graph(nodes,edges) %>% render_graph()
})"
"server.visnet","output$visnetwork <- renderVisNetwork({
nodes <- data.frame(id = 1:3,label=1:3)
edges <- data.frame(from = c(1,2,3), to = c(2,3,1))
visNetwork(nodes, edges)})"
"server.verbatimtext","output$verba_text <- renderText({
text <- ""sample text""
})"
"server.datatable","output$DT1 <- renderDataTable({
head(iris[,c(1,2)],3) },options = list(pageLength = 5,searching = T))"
